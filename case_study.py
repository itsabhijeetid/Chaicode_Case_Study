# -*- coding: utf-8 -*-
"""Case_Study.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d6DEP_pxXx7vXt5_feLSNmk3sNoeFe2v

Q1. Importing Dataset
"""

import pandas as pd
covid_19_confirmed = pd.read_csv('/content/covid_19_confirmed_v1_lyst1747728690432.csv')
covid_19_deaths = pd.read_csv('/content/covid_19_deaths_v1_lyst1747728711771.csv',skiprows=1)
covid_19_recovered = pd.read_csv('/content/covid_19_recovered_v1_lyst1747728719904.csv',skiprows=1)

covid_19_confirmed.head(10)

covid_19_deaths.head()

covid_19_recovered.head()

"""**Question 2**

Q2.1 Structure of each dataset
"""

covid_19_confirmed.info()

covid_19_deaths.info()

covid_19_recovered.info()

import matplotlib.pyplot as plt

"""Q2.2 Plots of confirmed cases over time for the top 5 countries"""

df_country = covid_19_confirmed.drop(columns=['Province/State', 'Lat', 'Long']).groupby('Country/Region').sum()
top_countries = df_country.iloc[:, -1].sort_values(ascending=False).head(5).index
df_top = df_country.loc[top_countries].T
df_top.index = pd.to_datetime(df_top.index, format='%m/%d/%y')

df_monthly = df_top.resample('ME').sum()
month_labels = df_monthly.index.strftime('%b %Y')

# Plot
plt.figure(figsize=(18, 12))
for country in top_countries:
    plt.plot(df_monthly.index, df_monthly[country], label=country, marker='o')

plt.title('Top 5 Countries--Monthly COVID-19 Confirmed Cases')
plt.xlabel('Month')
plt.ylabel('Confirmed Cases')
plt.xticks(ticks=df_monthly.index, labels=month_labels, rotation=90)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""Q2.3 Plots of confirmed cases over time for China"""

china_df = covid_19_confirmed[covid_19_confirmed['Country/Region'] == 'China']
china_total = china_df.drop(columns=['Province/State', 'Country/Region', 'Lat', 'Long']).sum(axis=0)

china_total.index = pd.to_datetime(china_total.index, format='%m/%d/%y', errors='coerce')
china_total = china_total.dropna()

china_monthly = china_total.resample('ME').last()
month_labels = [d.strftime('%b %Y') for d in china_monthly.index]

# Plot
plt.figure(figsize=(18, 12))
plt.plot(china_monthly.index, china_monthly.values, label='China', marker='o', color='red', linewidth=2)

plt.title('China--Monthly COVID-19 Confirmed Cases')
plt.xlabel('Month')
plt.ylabel('Confirmed Cases')
plt.xticks(ticks=china_monthly.index, labels=month_labels, rotation=90)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""Q3. Replacing Missing values for time-series data of covid_19_confirmed"""

missing_count = covid_19_confirmed.isna().sum()
print(f"Initial missing values:\n{missing_count}")

date_cols = covid_19_confirmed.columns[4:]
covid_19_confirmed[date_cols] = covid_19_confirmed[date_cols].ffill(axis=1)

"""Replacing Missing values for time-series data of covid_19_deaths"""

missing_count = covid_19_deaths.isna().sum()
print(f"Initial missing values:\n{missing_count}")

date_cols = covid_19_deaths.columns[4:]
covid_19_deaths[date_cols] = covid_19_deaths[date_cols].ffill(axis=1)

"""Replacing Missing values for time-series data of covid_19_recovered"""

missing_count = covid_19_recovered.isna().sum()
print(f"Initial missing values:\n{missing_count}")

date_cols = covid_19_recovered.columns[4:]
covid_19_recovered[date_cols] = covid_19_recovered[date_cols].ffill(axis=1)

"""Q4. Replacing blank values in the province column with "All Provinces" for covid_19_confirmed"""

covid_19_confirmed['Province/State'].replace('', pd.NA)
covid_19_confirmed['Province/State'].fillna('All Provinces')
print(covid_19_confirmed['Province/State'])

"""Replacing blank values in the province column with "All Provinces" for covid_19_deaths"""

covid_19_deaths['Province/State'].replace('', pd.NA)
covid_19_deaths['Province/State'].fillna('All Provinces')
print(covid_19_deaths['Province/State'])

"""Replacing blank values in the province column with "All Provinces" for covid_19_recovered"""

covid_19_recovered['Province/State'].replace('', pd.NA)
covid_19_recovered['Province/State'].fillna('All Provinces')
print(covid_19_recovered['Province/State'])

"""**Question 5**

Q5.1 Peak no. of daily new cases in Germany, France, Italy and Highest single-day surge, occur for covid_19_confirmed
"""

countries = ['Germany', 'France', 'Italy']
df_selected = covid_19_confirmed[covid_19_confirmed['Country/Region'].isin(countries)]

df_grouped = df_selected.groupby('Country/Region').sum(numeric_only=True)
df_grouped = df_grouped.drop(columns=['Lat', 'Long'])

df_transposed = df_grouped.T
df_transposed.index = pd.to_datetime(df_transposed.index, format='%m/%d/%y')
daily_new_cases = df_transposed.diff()

peak_info = {}
for country in countries:
    max_cases = daily_new_cases[country].max()
    max_date = daily_new_cases[country].idxmax()
    peak_info[country] = (int(max_cases), max_date.strftime("%Y-%m-%d"))

for country, (cases, date) in peak_info.items():
    print(f"{country}: Peak daily new cases = {cases:,} on {date}")

highest_country = max(peak_info.items(), key=lambda x: x[1][0])
print(f"\n{highest_country[0]} had the highest single-day surge: {highest_country[1][0]:,} cases on {highest_country[1][1]}")

"""Peak no. of daily new cases in Germany, France, Italy and Highest single-day surge, occur for covid_19_deaths"""

countries = ['Germany', 'France', 'Italy']
df_selected = covid_19_deaths[covid_19_deaths['Country/Region'].isin(countries)]

df_grouped = df_selected.groupby('Country/Region').sum(numeric_only=True)
df_grouped = df_grouped.drop(columns=['Lat', 'Long'])

df_transposed = df_grouped.T
df_transposed.index = pd.to_datetime(df_transposed.index, format='%m/%d/%y')
daily_new_cases = df_transposed.diff()

peak_info = {}
for country in countries:
    max_cases = daily_new_cases[country].max()
    max_date = daily_new_cases[country].idxmax()
    peak_info[country] = (int(max_cases), max_date.strftime("%Y-%m-%d"))

for country, (cases, date) in peak_info.items():
    print(f"{country}: Peak daily new cases = {cases:,} on {date}")

highest_country = max(peak_info.items(), key=lambda x: x[1][0])
print(f"\n{highest_country[0]} had the highest single-day surge: {highest_country[1][0]:,} cases on {highest_country[1][1]}")

"""Peak no. of daily new cases in Germany, France, Italy and Highest single-day surge, occur for covid_19_recovered"""

countries = ['Germany', 'France', 'Italy']
df_selected = covid_19_recovered[covid_19_recovered['Country/Region'].isin(countries)]

df_grouped = df_selected.groupby('Country/Region').sum(numeric_only=True)
df_grouped = df_grouped.drop(columns=['Lat', 'Long'])

df_transposed = df_grouped.T
df_transposed.index = pd.to_datetime(df_transposed.index, format='%m/%d/%y')
daily_new_cases = df_transposed.diff()

peak_info = {}
for country in countries:
    max_cases = daily_new_cases[country].max()
    max_date = daily_new_cases[country].idxmax()
    peak_info[country] = (int(max_cases), max_date.strftime("%Y-%m-%d"))

for country, (cases, date) in peak_info.items():
    print(f"{country}: Peak daily new cases = {cases:,} on {date}")

highest_country = max(peak_info.items(), key=lambda x: x[1][0])
print(f"\n{highest_country[0]} had the highest single-day surge: {highest_country[1][0]:,} cases on {highest_country[1][1]}")

"""Q5.2: Comparing recovery rates betweeen Canada, Australia as of Dec 31,2020"""

countries = ['Canada', 'Australia']
target_date = '12/31/20'

confirmed_grouped = covid_19_confirmed[covid_19_confirmed['Country/Region'].isin(countries)].groupby('Country/Region').sum(numeric_only=True)
recovered_grouped = covid_19_recovered[covid_19_recovered['Country/Region'].isin(countries)].groupby('Country/Region').sum(numeric_only=True)

results = {}
for country in countries:
    confirmed_cases = confirmed_grouped.loc[country, target_date]
    recovered_cases = recovered_grouped.loc[country, target_date]
    recovery_rate = (recovered_cases / confirmed_cases) * 100 if confirmed_cases > 0 else 0
    results[country] = {
        'Confirmed': int(confirmed_cases),
        'Recovered': int(recovered_cases),
        'Recovery Rate (%)': round(recovery_rate, 2)
    }

for country, stats in results.items():
    print(f"{country}:")
    print(f"  Confirmed Cases: {stats['Confirmed']:,}")
    print(f"  Recovered Cases: {stats['Recovered']:,}")
    print(f"  Recovery Rate: {stats['Recovery Rate (%)']}%\n")


better = max(results.items(), key=lambda x: x[1]['Recovery Rate (%)'])
print(f"{better[0]} had a better recovery rate of {better[1]['Recovery Rate (%)']}% as of Dec 31, 2020.")

"""Q5.3: Distribution of death rates in Canada. Highest, Lowest death rate as of latest data point"""

confirmed_ca = covid_19_confirmed[covid_19_confirmed['Country/Region'] == 'Canada']
deaths_ca = covid_19_deaths[covid_19_deaths['Country/Region'] == 'Canada']

latest_date = covid_19_confirmed.columns[-1]

province_data = pd.DataFrame({
    'Province': confirmed_ca['Province/State'].values,
    'Confirmed': confirmed_ca[latest_date].values,
    'Deaths': deaths_ca[latest_date].values
})

province_data['Death Rate (%)'] = (province_data['Deaths'] / province_data['Confirmed']) * 100
province_data['Death Rate (%)'] = province_data['Death Rate (%)'].round(2)

# to avoid divide by zero
province_data = province_data[province_data['Confirmed'] > 0]

sorted_data = province_data.sort_values(by='Death Rate (%)', ascending=False)

print("Death Rate Distribution Among Canadian Provinces:\n")
print(sorted_data[['Province', 'Confirmed', 'Deaths', 'Death Rate (%)']])

highest = sorted_data.iloc[0]
lowest = sorted_data.iloc[-1]

print(f"\nHighest Death Rate: {highest['Province']} - {highest['Death Rate (%)']}%")
print(f"Lowest Death Rate: {lowest['Province']} - {lowest['Death Rate (%)']}%")

"""**Question 6**

Q6.1: Transform deaths dataset from wide format.....
"""

id_vars = ['Province/State', 'Country/Region', 'Lat', 'Long']

deaths_long = covid_19_deaths.melt(id_vars=['Province/State', 'Country/Region', 'Lat', 'Long'],
                                   var_name='Date',
                                   value_name='Deaths')

deaths_long['Date'] = pd.to_datetime(deaths_long['Date'], format='%m/%d/%y', errors='coerce')
deaths_long = deaths_long.dropna(subset=['Date'])

print(deaths_long.head())

"""Q6.2: Total no. of Deaths per Country up to the current date"""

df_country_deaths = covid_19_deaths.groupby('Country/Region').sum(numeric_only=True)

latest_date = df_country_deaths.columns[-1]
total_deaths = df_country_deaths[latest_date].sort_values(ascending=False)

print(f"Latest Date in Dataset: {latest_date}")
print("Total Deaths per Country:\n")
print(total_deaths.head(5))

"""Q6.3: Top 5 Countries with the highest average Daily Deaths."""

df_long = pd.melt(covid_19_deaths,
                  id_vars=['Province/State', 'Country/Region', 'Lat', 'Long'],
                  var_name='Date',
                  value_name='Deaths')

df_long['Date'] = pd.to_datetime(df_long['Date'], format='%m/%d/%y', errors='coerce')

country_daily = df_long.groupby(['Country/Region', 'Date'])['Deaths'].sum().reset_index()
country_daily['Daily_Deaths'] = country_daily.groupby('Country/Region')['Deaths'].diff().fillna(0)

avg_daily_deaths = country_daily.groupby('Country/Region')['Daily_Deaths'].mean().reset_index()

top5_avg_deaths = avg_daily_deaths.sort_values(by='Daily_Deaths', ascending=False).head(5)

print("Top 5 Countries with the highest average Daily Deaths:")
print(top5_avg_deaths)

"""Q6.4: Total deaths evolved over time in US"""

us_df = covid_19_deaths[covid_19_deaths['Country/Region'] == 'US']

us_deaths = us_df.iloc[:, 4:].sum()

us_deaths.index = pd.to_datetime(us_deaths.index, format='%m/%d/%y')

# Plot
plt.figure(figsize=(18, 12))
plt.plot(us_deaths.index, us_deaths.values, color='darkred', linewidth=2)

plt.title('Total Deaths Over Time in the United States', fontsize=14)
plt.xlabel('Date')
plt.ylabel('Cumulative Deaths')
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Questions 7**

Q7.1: Merge the transformed datasets of confirmed cases, death, recovery on the 'Country/Region' and Date Cols.
"""

def transform_to_long(df, value_name):
    df_long = pd.melt(
        df,
        id_vars=['Province/State', 'Country/Region', 'Lat', 'Long'],
        var_name='Date',
        value_name=value_name
    )
    df_long['Date'] = pd.to_datetime(df_long['Date'], format='%m/%d/%y')
    return df_long

confirmed_long = transform_to_long(covid_19_confirmed, 'Confirmed')
deaths_long = transform_to_long(covid_19_deaths, 'Deaths')
recovered_long = transform_to_long(covid_19_recovered, 'Recovered')

merged_df = confirmed_long.merge(
    deaths_long[['Country/Region', 'Province/State', 'Date', 'Deaths']],
    on=['Country/Region', 'Province/State', 'Date'],
    how='left'
).merge(
    recovered_long[['Country/Region', 'Province/State', 'Date', 'Recovered']],
    on=['Country/Region', 'Province/State', 'Date'],
    how='left'
)

merged_df[['Confirmed', 'Deaths', 'Recovered']] = merged_df[['Confirmed', 'Deaths', 'Recovered']].fillna(0)

country_level_df = merged_df.groupby(['Country/Region', 'Date']).agg({
    'Confirmed': 'sum',
    'Deaths': 'sum',
    'Recovered': 'sum'
}).reset_index()

print(country_level_df.head())

"""Q7.2: Analyze monthly sum of confirmed cases, death and recovery"""

country_level_df['YearMonth'] = country_level_df['Date'].dt.to_period('M')

monthly_summary = country_level_df.groupby(['Country/Region', 'YearMonth']).agg({
    'Confirmed': 'sum',
    'Deaths': 'sum',
    'Recovered': 'sum'
}).reset_index()

monthly_summary['YearMonth'] = monthly_summary['YearMonth'].astype(str)
us_monthly = monthly_summary[monthly_summary['Country/Region'] == 'US']

print(us_monthly.head(12))
print("\n")

# Plot
plt.figure(figsize=(18, 12))
plt.plot(us_monthly['YearMonth'], us_monthly['Confirmed'], label='Confirmed', marker='o')
plt.plot(us_monthly['YearMonth'], us_monthly['Deaths'], label='Deaths', marker='o')
plt.plot(us_monthly['YearMonth'], us_monthly['Recovered'], label='Recovered', marker='o')

plt.title('Monthly COVID-19 Progression in the US')
plt.xlabel('Month')
plt.ylabel('Cases')
plt.xticks(rotation=90)
plt.legend()
plt.tight_layout()
plt.show()

"""Q7.3: Redo analysis in Q7.2 for US, Italy, Brazil"""

countries = ['US', 'Italy', 'Brazil']

df_filtered = country_level_df[country_level_df['Country/Region'].isin(countries)].copy()
df_filtered['YearMonth'] = df_filtered['Date'].dt.to_period('M')

monthly_summary = df_filtered.groupby(['Country/Region', 'YearMonth']).agg({
    'Confirmed': 'sum',
    'Deaths': 'sum',
    'Recovered': 'sum'
}).reset_index()

monthly_summary['YearMonth'] = monthly_summary['YearMonth'].astype(str)

# Plot
plt.figure(figsize=(18, 12))

for country in countries:
    data = monthly_summary[monthly_summary['Country/Region'] == country]
    plt.plot(data['YearMonth'], data['Confirmed'], marker='o', label=f'{country} Confirmed')
    plt.plot(data['YearMonth'], data['Deaths'], marker='x', linestyle='--', label=f'{country} Deaths')
    plt.plot(data['YearMonth'], data['Recovered'], marker='s', linestyle=':', label=f'{country} Recovered')

plt.title('COVID-19 Monthly: Confirmed, Deaths and Recovered Cases')
plt.xlabel('Month')
plt.ylabel('Number of Cases')
plt.xticks(rotation=90)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Question 8**

Q8.1: Identify 3 countries with highest avg death rates throughout 2020
"""

df_2020 = country_level_df[(country_level_df['Date'] >= '2020-01-01') & (country_level_df['Date'] <= '2020-12-31')].copy()

df_2020['Confirmed_nozero'] = df_2020['Confirmed'].replace(0, pd.NA)
df_2020['Death_Rate'] = df_2020['Deaths'] / df_2020['Confirmed_nozero']
df_2020 = df_2020.dropna(subset=['Death_Rate'])

avg_death_rate_2020 = df_2020.groupby('Country/Region')['Death_Rate'].mean().reset_index()

top3_death_rates = avg_death_rate_2020.sort_values(by='Death_Rate', ascending=False).head(3)

print("Top 3 Countries with Highest Average Death Rates in 2020:")
print(top3_death_rates)

"""Q8.2: Compare total no. of recoveries to the total no. of deaths in South Africa"""

sa_df = country_level_df[country_level_df['Country/Region'] == 'South Africa']

latest_date = sa_df['Date'].max()
latest_data = sa_df[sa_df['Date'] == latest_date].iloc[0]
total_recoveries = latest_data['Recovered']
total_deaths = latest_data['Deaths']

print(f"As of {latest_date.date()}, South Africa reported:")
print(f"Total Recoveries: {total_recoveries:,}")
print(f"Total Deaths: {total_deaths:,}")

if total_deaths > 0:
    ratio = total_recoveries / total_deaths
    print(f"Recovery to Death ratio: {ratio:.2f}")
else:
    print("No deaths reported, cannot compute ratio.")

"""Q8.3: Analyze ratio of recoveries to confirmed cases for US from March 2020 to May 2021."""

us_data = country_level_df[
    (country_level_df['Country/Region'] == 'US') &
    (country_level_df['Date'] >= '2020-03-01') &
    (country_level_df['Date'] <= '2021-05-31')
].copy()

us_data['YearMonth'] = us_data['Date'].dt.to_period('M')

monthly_us = us_data.groupby('YearMonth').agg({
    'Confirmed': 'sum',
    'Recovered': 'sum'
}).reset_index()

monthly_us['Recovery_Ratio'] = monthly_us['Recovered'] / monthly_us['Confirmed']

# Month with highest recovery ratio
max_recovery_month = monthly_us.loc[monthly_us['Recovery_Ratio'].idxmax()]

print("Monthly Recovery Ratios in the US (March 2020 - May 2021):")
print(monthly_us[['YearMonth', 'Recovery_Ratio']])

print(f"\nMonth with Highest Recovery Ratio: {max_recovery_month['YearMonth']}")
print(f"Recovery Ratio: {max_recovery_month['Recovery_Ratio']:.2f}")